// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/report.proto

package org.wso2.vick.telemetry.receiver.generated;

public final class Report {
  private Report() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ReportRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:istio.mixer.v1.ReportRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes>
        getAttributesList();
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes getAttributes(int index);
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    int getAttributesCount();
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    java.util.List<? extends org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder>
        getAttributesOrBuilderList();
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder getAttributesOrBuilder(
            int index);

    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    java.util.List<String>
        getDefaultWordsList();
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    int getDefaultWordsCount();
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    String getDefaultWords(int index);
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    com.google.protobuf.ByteString
        getDefaultWordsBytes(int index);

    /**
     * <pre>
     * The number of words in the global dictionary.
     * To detect global dictionary out of sync between client and server.
     * </pre>
     *
     * <code>uint32 global_word_count = 3;</code>
     */
    int getGlobalWordCount();
  }
  /**
   * <pre>
   * Used to report telemetry after performing one or more actions.
   * </pre>
   *
   * Protobuf type {@code istio.mixer.v1.ReportRequest}
   */
  public  static final class ReportRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:istio.mixer.v1.ReportRequest)
      ReportRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReportRequest.newBuilder() to construct.
    private ReportRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReportRequest() {
      attributes_ = java.util.Collections.emptyList();
      defaultWords_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      globalWordCount_ = 0;
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReportRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                attributes_ = new java.util.ArrayList<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes>();
                mutable_bitField0_ |= 0x00000001;
              }
              attributes_.add(
                  input.readMessage(org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.parser(), extensionRegistry));
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                defaultWords_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              defaultWords_.add(s);
              break;
            }
            case 24: {

              globalWordCount_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          defaultWords_ = defaultWords_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Report.internal_static_istio_mixer_v1_ReportRequest_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Report.internal_static_istio_mixer_v1_ReportRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ReportRequest.class, Builder.class);
    }

    private int bitField0_;
    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes> attributes_;
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    public java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes> getAttributesList() {
      return attributes_;
    }
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    public java.util.List<? extends org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder>
        getAttributesOrBuilderList() {
      return attributes_;
    }
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    public int getAttributesCount() {
      return attributes_.size();
    }
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes getAttributes(int index) {
      return attributes_.get(index);
    }
    /**
     * <pre>
     * The attributes to use for this request.
     * Each `Attributes` element represents the state of a single action. Multiple actions
     * can be provided in a single message in order to improve communication efficiency. The
     * client can accumulate a set of actions and send them all in one single message.
     * Although each `Attributes` message is semantically treated as an independent
     * stand-alone entity unrelated to the other attributes within the message, this
     * message format leverages delta-encoding between attribute messages in order to
     * substantially reduce the request size and improve end-to-end efficiency. Each
     * individual set of attributes is used to modify the previous set. This eliminates
     * the need to redundantly send the same attributes multiple times over within
     * a single request.
     * If a client is not sophisticated and doesn't want to use delta-encoding,
     * a degenerate case is to include all attributes in every individual message.
     * </pre>
     *
     * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
     */
    public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder getAttributesOrBuilder(
        int index) {
      return attributes_.get(index);
    }

    public static final int DEFAULT_WORDS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList defaultWords_;
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDefaultWordsList() {
      return defaultWords_;
    }
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    public int getDefaultWordsCount() {
      return defaultWords_.size();
    }
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    public String getDefaultWords(int index) {
      return defaultWords_.get(index);
    }
    /**
     * <pre>
     * The default message-level dictionary for all the attributes.
     * Individual attribute messages can have their own dictionaries, but if they don't
     * then this set of words, if it is provided, is used instead.
     * This makes it possible to share the same dictionary for all attributes in this
     * request, which can substantially reduce the overall request size.
     * </pre>
     *
     * <code>repeated string default_words = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDefaultWordsBytes(int index) {
      return defaultWords_.getByteString(index);
    }

    public static final int GLOBAL_WORD_COUNT_FIELD_NUMBER = 3;
    private int globalWordCount_;
    /**
     * <pre>
     * The number of words in the global dictionary.
     * To detect global dictionary out of sync between client and server.
     * </pre>
     *
     * <code>uint32 global_word_count = 3;</code>
     */
    public int getGlobalWordCount() {
      return globalWordCount_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < attributes_.size(); i++) {
        output.writeMessage(1, attributes_.get(i));
      }
      for (int i = 0; i < defaultWords_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, defaultWords_.getRaw(i));
      }
      if (globalWordCount_ != 0) {
        output.writeUInt32(3, globalWordCount_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < attributes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, attributes_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < defaultWords_.size(); i++) {
          dataSize += computeStringSizeNoTag(defaultWords_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDefaultWordsList().size();
      }
      if (globalWordCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, globalWordCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ReportRequest)) {
        return super.equals(obj);
      }
      ReportRequest other = (ReportRequest) obj;

      boolean result = true;
      result = result && getAttributesList()
          .equals(other.getAttributesList());
      result = result && getDefaultWordsList()
          .equals(other.getDefaultWordsList());
      result = result && (getGlobalWordCount()
          == other.getGlobalWordCount());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAttributesCount() > 0) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + getAttributesList().hashCode();
      }
      if (getDefaultWordsCount() > 0) {
        hash = (37 * hash) + DEFAULT_WORDS_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultWordsList().hashCode();
      }
      hash = (37 * hash) + GLOBAL_WORD_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGlobalWordCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ReportRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ReportRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ReportRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ReportRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ReportRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ReportRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ReportRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to report telemetry after performing one or more actions.
     * </pre>
     *
     * Protobuf type {@code istio.mixer.v1.ReportRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:istio.mixer.v1.ReportRequest)
        ReportRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Report.internal_static_istio_mixer_v1_ReportRequest_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Report.internal_static_istio_mixer_v1_ReportRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ReportRequest.class, Builder.class);
      }

      // Construct using org.wso2.vick.telemetry.receiver.generated.Report.ReportRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAttributesFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          attributesBuilder_.clear();
        }
        defaultWords_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        globalWordCount_ = 0;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Report.internal_static_istio_mixer_v1_ReportRequest_descriptor;
      }

      @Override
      public ReportRequest getDefaultInstanceForType() {
        return ReportRequest.getDefaultInstance();
      }

      @Override
      public ReportRequest build() {
        ReportRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public ReportRequest buildPartial() {
        ReportRequest result = new ReportRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (attributesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            attributes_ = java.util.Collections.unmodifiableList(attributes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.attributes_ = attributes_;
        } else {
          result.attributes_ = attributesBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          defaultWords_ = defaultWords_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.defaultWords_ = defaultWords_;
        result.globalWordCount_ = globalWordCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ReportRequest) {
          return mergeFrom((ReportRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ReportRequest other) {
        if (other == ReportRequest.getDefaultInstance()) return this;
        if (attributesBuilder_ == null) {
          if (!other.attributes_.isEmpty()) {
            if (attributes_.isEmpty()) {
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAttributesIsMutable();
              attributes_.addAll(other.attributes_);
            }
            onChanged();
          }
        } else {
          if (!other.attributes_.isEmpty()) {
            if (attributesBuilder_.isEmpty()) {
              attributesBuilder_.dispose();
              attributesBuilder_ = null;
              attributes_ = other.attributes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              attributesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAttributesFieldBuilder() : null;
            } else {
              attributesBuilder_.addAllMessages(other.attributes_);
            }
          }
        }
        if (!other.defaultWords_.isEmpty()) {
          if (defaultWords_.isEmpty()) {
            defaultWords_ = other.defaultWords_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureDefaultWordsIsMutable();
            defaultWords_.addAll(other.defaultWords_);
          }
          onChanged();
        }
        if (other.getGlobalWordCount() != 0) {
          setGlobalWordCount(other.getGlobalWordCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ReportRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ReportRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes> attributes_ =
        java.util.Collections.emptyList();
      private void ensureAttributesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          attributes_ = new java.util.ArrayList<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes>(attributes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder> attributesBuilder_;

      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes> getAttributesList() {
        if (attributesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attributes_);
        } else {
          return attributesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public int getAttributesCount() {
        if (attributesBuilder_ == null) {
          return attributes_.size();
        } else {
          return attributesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes getAttributes(int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);
        } else {
          return attributesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder setAttributes(
          int index, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.set(index, value);
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder setAttributes(
          int index, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.set(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder addAttributes(org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder addAttributes(
          int index, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes value) {
        if (attributesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttributesIsMutable();
          attributes_.add(index, value);
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder addAttributes(
          org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder addAttributes(
          int index, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder builderForValue) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.add(index, builderForValue.build());
          onChanged();
        } else {
          attributesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder addAllAttributes(
          Iterable<? extends org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes> values) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, attributes_);
          onChanged();
        } else {
          attributesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder clearAttributes() {
        if (attributesBuilder_ == null) {
          attributes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          attributesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public Builder removeAttributes(int index) {
        if (attributesBuilder_ == null) {
          ensureAttributesIsMutable();
          attributes_.remove(index);
          onChanged();
        } else {
          attributesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder getAttributesBuilder(
          int index) {
        return getAttributesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder getAttributesOrBuilder(
          int index) {
        if (attributesBuilder_ == null) {
          return attributes_.get(index);  } else {
          return attributesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public java.util.List<? extends org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder>
           getAttributesOrBuilderList() {
        if (attributesBuilder_ != null) {
          return attributesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attributes_);
        }
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder addAttributesBuilder() {
        return getAttributesFieldBuilder().addBuilder(
            org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.getDefaultInstance());
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder addAttributesBuilder(
          int index) {
        return getAttributesFieldBuilder().addBuilder(
            index, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.getDefaultInstance());
      }
      /**
       * <pre>
       * The attributes to use for this request.
       * Each `Attributes` element represents the state of a single action. Multiple actions
       * can be provided in a single message in order to improve communication efficiency. The
       * client can accumulate a set of actions and send them all in one single message.
       * Although each `Attributes` message is semantically treated as an independent
       * stand-alone entity unrelated to the other attributes within the message, this
       * message format leverages delta-encoding between attribute messages in order to
       * substantially reduce the request size and improve end-to-end efficiency. Each
       * individual set of attributes is used to modify the previous set. This eliminates
       * the need to redundantly send the same attributes multiple times over within
       * a single request.
       * If a client is not sophisticated and doesn't want to use delta-encoding,
       * a degenerate case is to include all attributes in every individual message.
       * </pre>
       *
       * <code>repeated .istio.mixer.v1.CompressedAttributes attributes = 1 [(.gogoproto.nullable) = false];</code>
       */
      public java.util.List<org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder>
           getAttributesBuilderList() {
        return getAttributesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder>
          getAttributesFieldBuilder() {
        if (attributesBuilder_ == null) {
          attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributes.Builder, org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.CompressedAttributesOrBuilder>(
                  attributes_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          attributes_ = null;
        }
        return attributesBuilder_;
      }

      private com.google.protobuf.LazyStringList defaultWords_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDefaultWordsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          defaultWords_ = new com.google.protobuf.LazyStringArrayList(defaultWords_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getDefaultWordsList() {
        return defaultWords_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public int getDefaultWordsCount() {
        return defaultWords_.size();
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public String getDefaultWords(int index) {
        return defaultWords_.get(index);
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDefaultWordsBytes(int index) {
        return defaultWords_.getByteString(index);
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public Builder setDefaultWords(
          int index, String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDefaultWordsIsMutable();
        defaultWords_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public Builder addDefaultWords(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDefaultWordsIsMutable();
        defaultWords_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public Builder addAllDefaultWords(
          Iterable<String> values) {
        ensureDefaultWordsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, defaultWords_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public Builder clearDefaultWords() {
        defaultWords_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default message-level dictionary for all the attributes.
       * Individual attribute messages can have their own dictionaries, but if they don't
       * then this set of words, if it is provided, is used instead.
       * This makes it possible to share the same dictionary for all attributes in this
       * request, which can substantially reduce the overall request size.
       * </pre>
       *
       * <code>repeated string default_words = 2;</code>
       */
      public Builder addDefaultWordsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDefaultWordsIsMutable();
        defaultWords_.add(value);
        onChanged();
        return this;
      }

      private int globalWordCount_ ;
      /**
       * <pre>
       * The number of words in the global dictionary.
       * To detect global dictionary out of sync between client and server.
       * </pre>
       *
       * <code>uint32 global_word_count = 3;</code>
       */
      public int getGlobalWordCount() {
        return globalWordCount_;
      }
      /**
       * <pre>
       * The number of words in the global dictionary.
       * To detect global dictionary out of sync between client and server.
       * </pre>
       *
       * <code>uint32 global_word_count = 3;</code>
       */
      public Builder setGlobalWordCount(int value) {
        
        globalWordCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of words in the global dictionary.
       * To detect global dictionary out of sync between client and server.
       * </pre>
       *
       * <code>uint32 global_word_count = 3;</code>
       */
      public Builder clearGlobalWordCount() {
        
        globalWordCount_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:istio.mixer.v1.ReportRequest)
    }

    // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReportRequest)
    private static final ReportRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ReportRequest();
    }

    public static ReportRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReportRequest>
        PARSER = new com.google.protobuf.AbstractParser<ReportRequest>() {
      @Override
      public ReportRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReportRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReportRequest> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ReportRequest> getParserForType() {
      return PARSER;
    }

    @Override
    public ReportRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReportResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:istio.mixer.v1.ReportResponse)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * Used to carry responses to telemetry reports
   * </pre>
   *
   * Protobuf type {@code istio.mixer.v1.ReportResponse}
   */
  public  static final class ReportResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:istio.mixer.v1.ReportResponse)
      ReportResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReportResponse.newBuilder() to construct.
    private ReportResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReportResponse() {
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReportResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Report.internal_static_istio_mixer_v1_ReportResponse_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Report.internal_static_istio_mixer_v1_ReportResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ReportResponse.class, Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ReportResponse)) {
        return super.equals(obj);
      }
      ReportResponse other = (ReportResponse) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ReportResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ReportResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ReportResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ReportResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ReportResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ReportResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ReportResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ReportResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ReportResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to carry responses to telemetry reports
     * </pre>
     *
     * Protobuf type {@code istio.mixer.v1.ReportResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:istio.mixer.v1.ReportResponse)
        ReportResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Report.internal_static_istio_mixer_v1_ReportResponse_descriptor;
      }

      @Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Report.internal_static_istio_mixer_v1_ReportResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ReportResponse.class, Builder.class);
      }

      // Construct using org.wso2.vick.telemetry.receiver.generated.Report.ReportResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Report.internal_static_istio_mixer_v1_ReportResponse_descriptor;
      }

      @Override
      public ReportResponse getDefaultInstanceForType() {
        return ReportResponse.getDefaultInstance();
      }

      @Override
      public ReportResponse build() {
        ReportResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public ReportResponse buildPartial() {
        ReportResponse result = new ReportResponse(this);
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ReportResponse) {
          return mergeFrom((ReportResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ReportResponse other) {
        if (other == ReportResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ReportResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ReportResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:istio.mixer.v1.ReportResponse)
    }

    // @@protoc_insertion_point(class_scope:istio.mixer.v1.ReportResponse)
    private static final ReportResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ReportResponse();
    }

    public static ReportResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReportResponse>
        PARSER = new com.google.protobuf.AbstractParser<ReportResponse>() {
      @Override
      public ReportResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReportResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReportResponse> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ReportResponse> getParserForType() {
      return PARSER;
    }

    @Override
    public ReportResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_mixer_v1_ReportRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_mixer_v1_ReportRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_mixer_v1_ReportResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_mixer_v1_ReportResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\025mixer/v1/report.proto\022\016istio.mixer.v1\032" +
      "\024gogoproto/gogo.proto\032\031mixer/v1/attribut" +
      "es.proto\"\201\001\n\rReportRequest\022>\n\nattributes" +
      "\030\001 \003(\0132$.istio.mixer.v1.CompressedAttrib" +
      "utesB\004\310\336\037\000\022\025\n\rdefault_words\030\002 \003(\t\022\031\n\021glo" +
      "bal_word_count\030\003 \001(\r\"\020\n\016ReportResponseBM" +
      "\n%org.wso2.vick.telemetry.receiver.coreZ" +
      "\025istio.io/api/mixer/v1\370\001\001\310\341\036\000\250\342\036\000\360\341\036\000b\006p" +
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
          org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.getDescriptor(),
        }, assigner);
    internal_static_istio_mixer_v1_ReportRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_istio_mixer_v1_ReportRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_mixer_v1_ReportRequest_descriptor,
        new String[] { "Attributes", "DefaultWords", "GlobalWordCount", });
    internal_static_istio_mixer_v1_ReportResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_istio_mixer_v1_ReportResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_mixer_v1_ReportResponse_descriptor,
        new String[] { });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.equalAll);
    registry.add(com.google.protobuf.GoGoProtos.goprotoGettersAll);
    registry.add(com.google.protobuf.GoGoProtos.gostringAll);
    registry.add(com.google.protobuf.GoGoProtos.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
    org.wso2.vick.telemetry.receiver.generated.AttributesOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
